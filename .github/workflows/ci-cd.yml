name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-test:
    name: 代码检查和测试
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v3
      
    - name: 设置Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        
    - name: 安装pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
        run_install: false
        
    - name: 获取pnpm缓存目录
      id: pnpm-cache
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
        
    - name: 缓存依赖
      uses: actions/cache@v3
      with:
        path: |
          ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          **/node_modules
        key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-
        
    - name: 安装依赖
      run: pnpm install
      
    - name: 运行代码检查
      run: pnpm lint
      
    - name: 运行测试
      run: pnpm test
      
  build:
    name: 构建应用
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v3
      
    - name: 设置Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        
    - name: 安装pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
        run_install: false
        
    - name: 获取pnpm缓存目录
      id: pnpm-cache
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
        
    - name: 缓存依赖
      uses: actions/cache@v3
      with:
        path: |
          ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          **/node_modules
        key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-
        
    - name: 安装依赖
      run: pnpm install
      
    - name: 构建应用
      run: pnpm build
      env:
        REACT_APP_COMMIT_SHA: ${{ github.sha }}
        REACT_APP_VERSION: ${{ github.ref_name }}
      
    - name: 上传构建产物
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: build
        
  deploy-testnet:
    name: 部署到测试网环境
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v3
      
    - name: 下载构建产物
      uses: actions/download-artifact@v3
      with:
        name: build-files
        path: build
        
    - name: 配置AWS凭证
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-east-1
        
    - name: 部署到S3
      run: aws s3 sync build/ s3://testnet-pixpet-h7ml-cn/ --delete
      
    - name: 刷新CloudFront缓存
      run: aws cloudfront create-invalidation --distribution-id ${{ secrets.TESTNET_CLOUDFRONT_ID }} --paths "/*"
      
    - name: 发送部署通知
      if: success()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: deployments
        SLACK_COLOR: good
        SLACK_ICON: https://pixpet.h7ml.cn/logo.png
        SLACK_MESSAGE: ':rocket: 测试网部署成功 - ${{ github.repository }}@${{ github.ref_name }}'
        SLACK_TITLE: 测试网部署通知
        SLACK_USERNAME: PixPet部署机器人
      
  deploy-production:
    name: 部署到生产环境
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v3
      
    - name: 下载构建产物
      uses: actions/download-artifact@v3
      with:
        name: build-files
        path: build
        
    - name: 配置AWS凭证
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-east-1
        
    - name: 部署到S3
      run: aws s3 sync build/ s3://pixpet-h7ml-cn/ --delete
      
    - name: 刷新CloudFront缓存
      run: aws cloudfront create-invalidation --distribution-id ${{ secrets.PROD_CLOUDFRONT_ID }} --paths "/*"
      
    - name: 发送部署通知
      if: success()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: deployments
        SLACK_COLOR: good
        SLACK_ICON: https://pixpet.h7ml.cn/logo.png
        SLACK_MESSAGE: ':tada: 生产环境部署成功 - ${{ github.repository }}@${{ github.ref_name }}'
        SLACK_TITLE: 生产环境部署通知
        SLACK_USERNAME: PixPet部署机器人
